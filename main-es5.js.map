{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/login-bar/login-bar.component.ts","webpack:///src/app/components/login-bar/login-bar.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/user/user.component.ts","webpack:///src/app/components/user/user.component.html","webpack:///src/app/interceptors/jwt-interceptor.interceptor.ts","webpack:///src/app/model/toasterConfig.ts","webpack:///src/app/modules/calendar/calendar.component.ts","webpack:///src/app/modules/calendar/calendar.component.html","webpack:///src/app/modules/notification-answer/notification-answer.component.ts","webpack:///src/app/modules/notification-answer/notification-answer.component.html","webpack:///src/app/modules/notification/notification.component.ts","webpack:///src/app/modules/notification/notification.component.html","webpack:///src/app/services/auth-guard.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/bill.service.ts","webpack:///src/app/services/modal-data.service.ts","webpack:///src/app/services/notification.service.ts","webpack:///src/app/services/team.service.ts","webpack:///src/app/services/training-place.service.ts","webpack:///src/app/services/training.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/views/bill/bill.component.ts","webpack:///src/app/views/bill/bill.component.html","webpack:///src/app/views/create-bill/create-bill.component.ts","webpack:///src/app/views/create-bill/create-bill.component.html","webpack:///src/app/views/create-notification/create-notification.component.ts","webpack:///src/app/views/create-notification/create-notification.component.html","webpack:///src/app/views/create-training/create-training.component.ts","webpack:///src/app/views/create-training/create-training.component.html","webpack:///src/app/views/edit-trainingplace/edit-trainingplace.component.ts","webpack:///src/app/views/edit-trainingplace/edit-trainingplace.component.html","webpack:///src/app/views/feedback/feedback.component.ts","webpack:///src/app/views/feedback/feedback.component.html","webpack:///src/app/views/home/home.component.ts","webpack:///src/app/views/home/home.component.html","webpack:///src/app/views/login/login.component.html","webpack:///src/app/views/login/login.component.ts","webpack:///src/app/views/manage-team/manage-team.component.ts","webpack:///src/app/views/manage-team/manage-team.component.html","webpack:///src/app/views/manage-trainingplaces/manage-trainingplaces.component.ts","webpack:///src/app/views/manage-trainingplaces/manage-trainingplaces.component.html","webpack:///src/app/views/register/register.component.html","webpack:///src/app/views/register/register.component.ts","webpack:///src/app/views/training/training.component.ts","webpack:///src/app/views/training/training.component.html","webpack:///src/app/views/view-notification/view-notification.component.ts","webpack:///src/app/views/view-notification/view-notification.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","authService","title","currentUser","subscribe","data","user","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","LoginBarComponent","logOut","NavbarComponent","UserComponent","JwtInterceptorInterceptor","authenticationService","request","next","currentUserValue","token","clone","setHeaders","Accept","Authorization","handle","toasterConfig","timeOut","progressBar","positionClass","tapToDismiss","CalendarComponent","trainingService","router","getTrainingsForUser","trainings","undefined","navigate","deleteTraining","NotificationAnswerComponent","dialogRef","modalDataService","fb","notificationService","notificationAnswerForm","group","answer","required","content","notificationToAnswer","getNotification","notificationId","get","value","answerForm","trainingId","trainingDto","close","closeModal","onSubmit","NotificationComponent","matDialog","notifications","getNotificationsForUser","notification","setNotification","dialogConfig","disableClose","height","width","modalDialog","open","AuthGuardService","toastrService","route","state","error","queryParams","returnUrl","url","providedIn","AuthService","http","currentUserSubject","apiBaseUrl","JSON","parse","localStorage","getItem","asObservable","email","password","post","pipe","setItem","stringify","success","userName","removeItem","registerForm","httpOptions","headers","firstName","lastName","phoneNumber","teamId","team","playerPositions","positions","role","BillService","billform","ModalDataService","NotificationService","console","log","form","coming","appUserId","TeamService","player","TrainingPlaceService","place","put","TrainingService","trainingFrom","r","toString","UserService","feedbackForm","BillComponent","billService","getUserBills","bills","CreateBillComponent","teamService","userForm","billForm","deadline","total","getPlayersInTeam","users","newInvoice","UserBill","createBillForUser","table","CreateNotificationComponent","notificationFrom","notificationDescription","players","filter","pl","description","createNotification","toPromise","CreateTrainingComponent","trainingPlaceService","darkTheme","container","bodyBackgroundColor","buttonColor","dial","dialBackgroundColor","clockFace","clockFaceBackgroundColor","clockHandColor","clockFaceTimeInactiveColor","duration","start","startTime","createdBy","getTrainingPlaces","places","trainingPlaceId","notificationContent","peopleInvited","createTraining","EditTrainingplaceComponent","trainingPlace","trainingPlaceForm","address","name","openingTime","closingTime","snapshot","paramMap","getTrainingPlace","editTrainingPlace","FeedbackComponent","userService","feedBackForm","feedback","rating","postFeedback","HomeComponent","LoginComponent","username","loginInvalid","formSubmitAttempt","valid","login","ManageTeamComponent","removePlayerFromTeam","ManageTrainingplacesComponent","trainingPlaces","addTrainingPlace","location","reload","response","RegisterComponent","roles","registerFrom","password2","position","getTeams","teams","registerFormInvalid","controls","register","TrainingComponent","getTrainingData","training","ViewNotificationComponent","getAllUserNotifications","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {LoginComponent} from './views/login/login.component';\nimport {HomeComponent} from './views/home/home.component';\nimport {RegisterComponent} from './views/register/register.component';\nimport {CreateTrainingComponent} from './views/create-training/create-training.component';\nimport {ManageTeamComponent} from './views/manage-team/manage-team.component';\nimport {TrainingComponent} from './views/training/training.component';\nimport {CreateNotificationComponent} from './views/create-notification/create-notification.component';\nimport {NotificationComponent} from './modules/notification/notification.component';\nimport {BillComponent} from './views/bill/bill.component';\nimport {CreateBillComponent} from './views/create-bill/create-bill.component';\nimport {FeedbackComponent} from './views/feedback/feedback.component';\nimport {AuthGuardService} from './services/auth-guard.service';\nimport {ManageTrainingplacesComponent} from './views/manage-trainingplaces/manage-trainingplaces.component';\nimport {EditTrainingplaceComponent} from './views/edit-trainingplace/edit-trainingplace.component';\n\n\nconst appRoutes: Routes = [\n    {path: 'login', component: LoginComponent},\n    {path: 'register', component: RegisterComponent},\n    {path: 'home', component: HomeComponent,  canActivate: [AuthGuardService] },\n    {path: 'manage', component: ManageTeamComponent, canActivate: [AuthGuardService] },\n    {path: 'training/create', component: CreateTrainingComponent, canActivate: [AuthGuardService] },\n    {path: 'training/:id', component: TrainingComponent, canActivate: [AuthGuardService] },\n    {path: 'notification/create', component: CreateNotificationComponent, canActivate: [AuthGuardService] },\n    {path: 'notifications', component: NotificationComponent, canActivate: [AuthGuardService] },\n    {path: 'bill', component: BillComponent, canActivate: [AuthGuardService] },\n    {path: 'bill/create', component: CreateBillComponent, canActivate: [AuthGuardService] },\n    {path: 'feedback/create', component: FeedbackComponent, canActivate: [AuthGuardService] },\n    {path: 'trainingplaces', component: ManageTrainingplacesComponent, canActivate: [AuthGuardService] },\n    {path: 'trainingplace/edit/:id', component: EditTrainingplaceComponent, canActivate: [AuthGuardService] }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(\n            appRoutes\n            // { enableTracing: true }\n        )\n        // other imports here\n    ],\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from './services/auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'training-app';\n    user;\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.authService.currentUser.subscribe(data => this.user = data);\n    }\n\n}\n","<mat-sidenav-container class=\"app-container\">\n    <mat-sidenav #sidenav>\n        <div class=\"container\">\n            <div class=\"row\">\n                <app-user></app-user>\n            </div>\n            <div *ngIf=\"user\">\n                <div class=\"row\">\n                    <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/home'\" (click)=\"sidenav.toggle()\"> Home </a>\n                </div>\n                <div class=\"row\">\n                    <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/bill'\" (click)=\"sidenav.toggle()\"> View your bills </a>\n                </div>\n                <div class=\"row\">\n                    <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/feedback/create'\" (click)=\"sidenav.toggle()\">Give feedback to this app</a>\n                </div>\n                <div *ngIf=\"user.role === 'Manager'\">\n                    <div class=\"row\">\n                        <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/trainingplaces'\" (click)=\"sidenav.toggle()\">Training Places</a>\n                    </div>\n                    <div class=\"row\">\n                        <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/notification/create'\" (click)=\"sidenav.toggle()\"> Create new notification </a>\n                    </div>\n                    <div class=\"row\">\n                        <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/training/create'\" (click)=\"sidenav.toggle()\"> Create new training </a>\n                    </div>\n                    <div class=\"row\">\n                        <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/manage'\" (click)=\"sidenav.toggle()\"> Manage team </a>\n                    </div>\n                    <div class=\"row\">\n                        <a mat-raised-button color=\"primary\" class=\"m-2 col nav-btn\" [routerLink]=\"'/bill/create'\" (click)=\"sidenav.toggle()\">Create new invoice</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </mat-sidenav>\n    <mat-sidenav-content>\n        <app-navbar></app-navbar>\n        <button mat-raised-button color=\"primary\" class=\"nav-btn m-4\" (click)=\"sidenav.open()\">Menu</button>\n        <div class=\"justify-content-center\">\n            <router-outlet></router-outlet>\n        </div>\n    </mat-sidenav-content>\n</mat-sidenav-container>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LoginComponent } from './views/login/login.component';\nimport { RegisterComponent } from './views/register/register.component';\nimport { HomeComponent } from './views/home/home.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginBarComponent } from './components/login-bar/login-bar.component';\nimport { CalendarComponent } from './modules/calendar/calendar.component';\nimport { NotificationComponent } from './modules/notification/notification.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {RouterModule} from '@angular/router';\nimport {MatButtonModule} from '@angular/material/button';\nimport { CreateTrainingComponent } from './views/create-training/create-training.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport { ManageTeamComponent } from './views/manage-team/manage-team.component';\nimport {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\nimport { TrainingComponent } from './views/training/training.component';\nimport { CreateNotificationComponent } from './views/create-notification/create-notification.component';\nimport { ViewNotificationComponent } from './views/view-notification/view-notification.component';\nimport { NotificationAnswerComponent } from './modules/notification-answer/notification-answer.component';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatMenuModule} from '@angular/material/menu';\nimport { BillComponent } from './views/bill/bill.component';\nimport { CreateBillComponent } from './views/create-bill/create-bill.component';\nimport {JwtInterceptorInterceptor} from './interceptors/jwt-interceptor.interceptor';\nimport { FeedbackComponent } from './views/feedback/feedback.component';\nimport { UserComponent } from './components/user/user.component';\nimport {ToastContainerModule, ToastrModule} from 'ngx-toastr';\nimport {toasterConfig} from './model/toasterConfig';\nimport { ManageTrainingplacesComponent } from './views/manage-trainingplaces/manage-trainingplaces.component';\nimport { EditTrainingplaceComponent } from './views/edit-trainingplace/edit-trainingplace.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    NavbarComponent,\n    LoginBarComponent,\n    CalendarComponent,\n    NotificationComponent,\n    CreateTrainingComponent,\n    ManageTeamComponent,\n    TrainingComponent,\n    CreateNotificationComponent,\n    ViewNotificationComponent,\n    NotificationAnswerComponent,\n    BillComponent,\n    CreateBillComponent,\n    FeedbackComponent,\n    UserComponent,\n    ManageTrainingplacesComponent,\n    EditTrainingplaceComponent,\n  ],\n    imports: [\n        NgxMaterialTimepickerModule,\n        MatNativeDateModule,\n        BrowserModule,\n        HttpClientModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        MatToolbarModule,\n        RouterModule,\n        MatButtonModule,\n        MatIconModule,\n        MatCardModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        FormsModule,\n        MatRadioModule,\n        MatSidenavModule,\n        MatMenuModule,\n        ToastrModule.forRoot(toasterConfig),\n        ToastContainerModule\n    ],\n  providers: [    {\n      provide : HTTP_INTERCEPTORS,\n      useClass: JwtInterceptorInterceptor,\n      multi   : true,\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\n\n@Component({\n    selector: 'app-login-bar',\n    templateUrl: './login-bar.component.html',\n    styleUrls: ['./login-bar.component.scss']\n})\nexport class LoginBarComponent implements OnInit {\n    user;\n    constructor(private authService: AuthService) {\n    }\n\n    ngOnInit(): void {\n        this.authService.currentUser.subscribe(data => this.user = data);\n    }\n\n\n    logout() {\n        this.authService.logOut();\n    }\n}\n","<div class=\"container\">\n    <div *ngIf=\"!this.user else elseBlock\">\n        <a mat-button [routerLink]=\"'/login'\">Login</a>|<a mat-button [routerLink]=\"'/register'\">Register</a>\n    </div>\n    <ng-template #elseBlock>\n        <button mat-button (click)=\"logout()\">\n            <mat-icon>exit_to_app</mat-icon>Logout\n        </button>\n    </ng-template>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"toolbar\">\r\n  <mat-toolbar-row class=\"w-100\">\r\n      <div class=\"container w-100 row\">\r\n          <a mat-button [routerLink]=\"'/home'\" class=\"\"><span class=\"material-icons\">sports_soccer</span>FootballTrainer</a>\r\n          <div class=\"login\">\r\n              <app-login-bar></app-login-bar>\r\n          </div>\r\n      </div>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n\n    user;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.currentUser.subscribe(data => this.user = data);\n  }\n\n}\n","<span *ngIf=\"this.user\">\n    <mat-card class=\"m-4\">\n        <mat-card-header>\n            <h2>{{this.user.userName}}</h2>\n        </mat-card-header>\n        <mat-card-content>\n            <mat-card class=\"m-2\">\n                <h2>Your info</h2>\n                <div class=\"row  m-2\">Phone: {{this.user.phoneNumber}}</div>\n                <div class=\"row  m-2\">Email: {{this.user.email}}</div>\n                <div class=\"row  m-2\">Team: {{this.user.teamName}}</div>\n                <div class=\"row  m-2\">Phone: {{this.user.phoneNumber}}</div>\n                <div class=\"row  m-2\">Role: {{this.user.role}}</div>\n                <div class=\"row  m-2\">\n                    Positions: <span *ngFor=\"let position of this.user.positions\">{{position.position}}</span>\n                </div>\n            </mat-card>\n        </mat-card-content>\n    </mat-card>\n</span>\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {AuthService} from '../services/auth.service';\n\n@Injectable()\nexport class JwtInterceptorInterceptor implements HttpInterceptor {\n\n    constructor(private authenticationService: AuthService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser && currentUser.token) {\n            request = request.clone({\n                setHeaders: {\n                    'Content-Type' : 'application/json; charset=utf-8',\n                    Accept       : 'application/json',\n                    Authorization: `Bearer ${currentUser.token}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","export const toasterConfig = {\r\n    timeOut: 3000,\r\n    progressBar: true,\r\n    positionClass: \t'toast-top-center',\r\n    tapToDismiss: true\r\n};\r\n","import {Component, OnInit} from '@angular/core';\nimport {TrainingService} from '../../services/training.service';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\nimport * as moment from 'moment';\n\n@Component({\n    selector: 'app-calendar',\n    templateUrl: './calendar.component.html',\n    styleUrls: ['./calendar.component.scss']\n})\nexport class CalendarComponent implements OnInit {\n\n    trainings: any;\n    user;\n\n    constructor(\n        private authService: AuthService,\n        private trainingService: TrainingService,\n        private router: Router\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.authService.currentUser.subscribe(data => this.user = data);\n        this.trainingService.getTrainingsForUser().subscribe(data =>\n            this.trainings = data\n        );\n        if (this.trainings === undefined) {\n            this.trainings = [];\n        }\n    }\n\n    viewTraining(id: any) {\n        this.router.navigate(['/training/' + id]);\n    }\n\n    DeleteTraining(id: any) {\n        this.trainingService.deleteTraining(id);\n    }\n}\n","<div class=\"container \">\n    <div class=\"container border rounded p-4 box-shadow\">\n        <h1 class=\"text-center\">Training calendar</h1> \n        <div *ngIf=\"trainings.length > 0\">\n            <div *ngFor=\"let training of trainings\" class=\"training m-4 border rounded box-shadow\" >\n                <h1 class=\"m-4 p-1 training-date rounded \">{{training.trainingDate | date : \"dd MMM yyyy\"}}<span *ngIf=\"this.user.id == training.createdBy.id\" style=\"margin-left: 25rem\"><button mat-raised-button color=\"warn\" (click)=\"DeleteTraining(training.id)\">Delete</button></span></h1>\n                <h3 class=\"ml-4 mr-4 p-1 training-date rounded\">At {{training.trainingPlace.name}}, training starts\n                    at {{training.startTime.substring(0, training.startTime.length - 3)}}</h3>\n                <div class=\"row\">\n                    <div class=\"col\">\n                        <table class=\"table table-responsive m-4\">\n                            <tr>\n                                <th>Description</th>\n                                <th>Duration</th>\n                                <th>Participants</th>\n                                <th>People invited</th>\n                                <th>Status</th>\n                                <th></th>\n                            </tr>\n                            <tr>\n                                <td>{{training.description}} </td>\n                                <td>{{training.duration}} </td>\n                                <td>{{training.peopleAttending.length}}</td>\n                                <td>{{training.peopleInvited.length}}</td>\n                                <td>{{training.trainingStatus}}</td>\n                                <td></td>\n                            </tr>\n                        </table>\n                    </div>\n                    <div class=\"col\">\n                        \n                    </div>\n                    <div class=\"col\">\n                        <a class=\"text-center m-4\" mat-raised-button color=\"primary\" (click)=\"viewTraining(training.id)\">Details</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n \n        <div *ngIf=\"trainings.length === 0\" class=\"\">\n            <h4 class=\"text-center\">Sorry, you have no planned trainings :(</h4>\n        </div>\n    </div>\n</div>\n\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {ModalDataService} from '../../services/modal-data.service';\nimport {TrainingService} from '../../services/training.service';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {NotificationService} from '../../services/notification.service';\n\n@Component({\n    selector: 'app-notification-answer',\n    templateUrl: './notification-answer.component.html',\n    styleUrls: ['./notification-answer.component.scss']\n})\nexport class NotificationAnswerComponent implements OnInit {\n\n    notificationToAnswer: any;\n    trainingData: any;\n    notificationAnswerForm: any;\n\n    constructor(\n        public dialogRef: MatDialogRef<NotificationAnswerComponent>,\n        private modalDataService: ModalDataService,\n        private trainingService: TrainingService,\n        private fb: FormBuilder,\n        private router: Router,\n        private notificationService: NotificationService\n    ) {\n        this.notificationAnswerForm = this.fb.group({\n            answer: ['', Validators.required],\n            content: ['', Validators.required],\n        });\n\n    }\n\n    ngOnInit(): void {\n        this.notificationToAnswer = this.modalDataService.getNotification();\n    }\n\n    onSubmit() {\n        let notificationId = this.notificationToAnswer.id;\n        let answer = this.notificationAnswerForm.get('answer').value;\n        let content = this.notificationAnswerForm.get('content').value;\n        let answerForm = {\n            answer: answer,\n            content: content,\n            notificationId: notificationId,\n            trainingId: this.notificationToAnswer.trainingDto.id\n        };\n        this.notificationService.answer(answerForm);\n        this.dialogRef.close();\n    }\n\n    closeModal() {\n        this.dialogRef.close();\n    }\n\n}\n","<div id=\"modal-content-wrapper\">\n    <header class=\"modal-header\">\n        <h1 id=\"modal-title\">\n            {{notificationToAnswer.title}}\n        </h1>\n        <button mat-raised-button color=\"warn\" (click)=\"closeModal()\"><span class=\"material-icons\">close</span></button>\n    </header>\n    <section class=\"modal-body\">\n        <div class=\"container\">\n            <div class=\"row\">\n                {{notificationToAnswer.notificationContent}}\n            </div>\n            <div class=\"row\">\n                Training:\n                {{notificationToAnswer.trainingDto.trainingDate | date : \"dd MMM yyyy\"}}\n                {{notificationToAnswer.trainingDto.description}} at\n                {{notificationToAnswer.trainingDto.startTime}}\n            </div>\n\n        </div>\n        <div>\n            <form [formGroup]=\"notificationAnswerForm\" class=\"container mt-4\">\n                Are you planning to go to this training?\n                <mat-radio-group aria-label=\"Select an option\" formControlName=\"answer\">\n                    <mat-radio-button value=\"1\" class=\"m-2\">Yes</mat-radio-button>\n                    <mat-radio-button value=\"2\" class=\"m-2\">No</mat-radio-button>\n                </mat-radio-group>\n                <div *ngIf=\"notificationAnswerForm.get('answer').value === '2'\">\n                    <div>\n                        <label for=\"content\">\n                            Enter reason you will not participate in this training\n                        </label>\n                        <textarea formControlName=\"content\" id=\"content\" cols=\"50\" rows=\"10\">\n                    </textarea>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </section>\n    <footer class=\"modal-footer\">\n        <button mat-button color=\"primary\" (click)=\"onSubmit()\"> Submit answer</button>\n        <button mat-button (click)=\"closeModal()\">Go back</button>\n    </footer>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {NotificationService} from '../../services/notification.service';\nimport {MatDialog, MatDialogConfig} from '@angular/material/dialog';\nimport {NotificationAnswerComponent} from '../notification-answer/notification-answer.component';\nimport {ModalDataService} from '../../services/modal-data.service';\n\n@Component({\n    selector: 'app-notification',\n    templateUrl: './notification.component.html',\n    styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n\n    notifications: any;\n\n    constructor(private notificationService: NotificationService,\n                public matDialog: MatDialog,\n                private modalDataService: ModalDataService) {\n    }\n\n    ngOnInit(): void {\n        this.notifications = [];\n        this.notificationService.getNotificationsForUser().subscribe(data => this.notifications = data);\n    }\n\n    openNotificationAnswerModal(notification: any) {\n        this.modalDataService.setNotification(notification);\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.disableClose = true;\n        dialogConfig.id = 'modal-component';\n        dialogConfig.height = '600px';\n        dialogConfig.width = '600px';\n        const modalDialog = this.matDialog.open(NotificationAnswerComponent, dialogConfig);\n    }\n}\n","<div class=\"container \">\n    <div class=\"container border rounded ml-1 p-4 box-shadow\">\n        <div class=\"notification\">\n            <h1>New notifications</h1>\n            <span class=\"badge\">{{notifications.length}}</span>\n        </div>\n        <div *ngIf=\"notifications.length > 0\" class=\"container\">\n            <mat-card *ngFor=\"let notification of notifications\" class=\"notification-card\">\n                <mat-card-header class=\"notification-header\">{{notification.title}}</mat-card-header>\n                <mat-card-content>{{notification.notificationContent}}</mat-card-content>\n                <mat-card-footer class=\"notification-footer\">\n                    <button *ngIf=\"notification.trainingDto !== null\" mat-raised-button (click)=\"openNotificationAnswerModal(notification)\" color=\"primary\">Answer</button>\n                </mat-card-footer>\n            </mat-card>\n        </div>\n        <div *ngIf=\"notifications.length === 0\" class=\"container\">\n               <span class=\"justify-content-center\" >\n            You have no new notifications\n        </span>\n        </div>\n     \n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {AuthService} from './auth.service';\nimport {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport {toasterConfig} from '../model/toasterConfig';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService {\n\n    constructor(public toastrService: ToastrService, public authService: AuthService, public router: Router) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const currentUser = this.authService.currentUserValue;\n        if (currentUser) {\n            // logged in so return true\n            return true;\n        }\n        this.toastrService.error('Please login','You are not logged in');\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n        return false;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {User} from '../model/user';\nimport {map} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {environment} from '../../environments/environment';\nimport {ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../model/toasterConfig';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    private currentUserSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n    public currentUser: Observable<User>;\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n    constructor(private http: HttpClient, private router: Router, private toastrService: ToastrService) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    login(email: string, password: string) {\n        return this.http.post<any>(this.apiBaseUrl + `account/login`, {email, password})\n            .pipe(map(user => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                this.toastrService.success('You have been logged in as ' + user.userName, 'Success', toasterConfig);\n                this.currentUserSubject.next(user);\n                return user;\n            }));\n    }\n\n    logOut() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n        this.router.navigate(['/login']);\n        this.toastrService.success('You have been logged out', 'Success', toasterConfig);\n    }\n\n    register(registerForm) {\n        const httpOptions = {headers: new HttpHeaders({'Content-Type': 'application/json'})};\n        return this.http.post<any>(this.apiBaseUrl + 'account/register', JSON.stringify({\n            email: registerForm.email,\n            password: registerForm.password,\n            firstName: registerForm.firstName,\n            lastName: registerForm.lastName,\n            phoneNumber: registerForm.phoneNumber,\n            teamId: registerForm.team,\n            playerPositions: registerForm.positions,\n            role: registerForm.role\n        }), httpOptions).pipe(map(user => {\n            this.toastrService.success('You have been logged in as ' + user.userName, 'Success', toasterConfig);\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('currentUser', JSON.stringify(user));\n            this.currentUserSubject.next(user);\n            return user;\n        }));\n    }\n\n    getAllUsersInTeam() {\n        const user = this.currentUserValue;\n        return this.http.get(this.apiBaseUrl + 'account/getAllUsers/' + user.teamId);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {AuthService} from './auth.service';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BillService {\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n    user;\n\n    constructor(private http: HttpClient,\n                private authService: AuthService) {\n    }\n\n    getUserBills() {\n        this.authService.currentUser.subscribe(data => this.user = data);\n        return this.http.get(this.apiBaseUrl + 'bill/' + this.user.id);\n    }\n\n    createBillForUser(billform) {\n        return this.http.post(this.apiBaseUrl + 'bill', billform);\n    }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ModalDataService {\n    notification: any;\n\n    constructor() {\n    }\n    \n    setNotification(notification){\n        this.notification = notification;\n    }\n    getNotification(){\n        return this.notification;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {AuthService} from './auth.service';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationService {\n    user: any;\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n\n    constructor(private http: HttpClient,\n                private authService: AuthService) {\n    }\n\n    getNotificationsForUser() {\n        this.authService.currentUser.subscribe(data => this.user = data);\n        return this.http.get(this.apiBaseUrl + 'account/getusernotifications/' + this.user.id);\n    }\n\n    createNotification(notification: { players: any; description: any; title: any }) {\n        return this.http.post(this.apiBaseUrl + 'notification', notification,\n            {headers: new HttpHeaders({'Content-Type': 'application/json'})});\n    }\n\n    async answer(answerForm: any) {\n        await this.authService.currentUser.subscribe(data => this.user = data);\n        console.log(this.user);\n        if (answerForm.answer === '1') {\n            const form = {\n                coming: true,\n                notificationId: answerForm.notificationId,\n                content: answerForm.content,\n                trainingId: answerForm.trainingId,\n                appUserId: this.user.id\n            };\n            console.log(form);\n            return this.http.post(this.apiBaseUrl + 'notificationanswer', form,\n                {headers: new HttpHeaders({'Content-Type': 'application/json'})}).subscribe();\n        }\n        if (answerForm.answer === '2') {\n            const form = {\n                coming: false,\n                notificationId: answerForm.notificationId,\n                content: answerForm.content,\n                trainingId: answerForm.trainingId,\n                appUserId: this.user.id\n            };\n            console.log(form);\n            return this.http.post(this.apiBaseUrl + 'notificationanswer', form,\n                {headers: new HttpHeaders({'Content-Type': 'application/json'})}).subscribe();\n        }\n\n    }\n\n    getAllUserNotifications() {\n        this.authService.currentUser.subscribe(data => this.user = data);\n        return this.http.get(this.apiBaseUrl + 'getallusernotifications/' + this.user.id);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {AuthService} from './auth.service';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TeamService {\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n    user: any;\n\n    constructor(private http: HttpClient,\n                private authService: AuthService) {\n    }\n\n    getTeams() {\n        return this.http.get(this.apiBaseUrl + 'team');\n    }\n\n    getPlayersInTeam() {\n        this.user = this.authService.currentUserValue;\n        return this.http.get(this.apiBaseUrl + 'account/getusersinteam/' + this.user.teamId);\n    }\n\n    removePlayerFromTeam(player) {\n        return this.http.post(this.apiBaseUrl + 'team/removePlayer', player);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {TrainingPlace} from '../model/training-place';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TrainingPlaceService {\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n\n    constructor(private http: HttpClient) {\n    }\n\n    addTrainingPlace(place) {\n        return this.http.post(this.apiBaseUrl + 'trainingplace', place);\n    }\n\n    getTrainingPlaces() {\n        return this.http.get<TrainingPlace[]>(this.apiBaseUrl + 'trainingplace');\n    }\n\n    delete(id: any) {\n        return this.http.delete(this.apiBaseUrl + 'trainingplace/' + id);\n    }\n\n    getTrainingPlace(id: string) {\n        return this.http.get<TrainingPlace>(this.apiBaseUrl + 'trainingplace/'+id);\n    }\n\n    editTrainingPlace(form: { address: any; closingTime: any; openingTime: any; name: any }) {\n        return this.http.put('trainingplace', form);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {User} from '../model/user';\nimport {AuthService} from './auth.service';\nimport {environment} from '../../environments/environment';\nimport {ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../model/toasterConfig';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TrainingService {\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n    user: any;\n\n    constructor(private http: HttpClient,\n                private authService: AuthService,\n                private toastrService: ToastrService) {\n    }\n\n    getTrainingsForUser() {\n        this.authService.currentUser.subscribe(data => this.user = data);\n        return this.http.get(this.apiBaseUrl + 'account/getusertrainings/' + this.user.id);\n    }\n\n    async createTraining(trainingFrom: any) {\n        const httpOptions = {headers: new HttpHeaders({'Content-Type': 'application/json'})};\n        this.http.post(this.apiBaseUrl + 'training', JSON.stringify(trainingFrom),\n            httpOptions).subscribe(r => {\n                this.toastrService.success(r.toString(), 'Success', toasterConfig);\n            });\n    }\n\n    getTrainingData(id: string) {\n        return this.http.get(this.apiBaseUrl + 'training/' + id);\n    }\n\n    deleteTraining(id: any) {\n        return this.http.delete(this.apiBaseUrl + 'training/' + id);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {User} from '../model/user';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    public apiBaseUrl = `${environment.apiBaseUrl}`;\n\n    constructor(private http: HttpClient) {\n    }\n\n\n    getAllMembersInTeam(team) {\n        return this.http.get<User>(this.apiBaseUrl + 'team/members');\n    }\n\n    removeMemberFromTeam(user: User) {\n        return this.http.post('', user);\n\n    }\n\n    addMemberToTeam(user: User) {\n        return this.http.post('', user);\n    }\n\n    getPositions() {\n        return this.http.get(this.apiBaseUrl + 'playerposition');\n\n    }\n    postFeedback(feedbackForm){\n        return this.http.post(this.apiBaseUrl + 'feedback', feedbackForm);\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {BillService} from '../../services/bill.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../../model/toasterConfig';\n\n@Component({\n    selector: 'app-bill',\n    templateUrl: './bill.component.html',\n    styleUrls: ['./bill.component.scss']\n})\nexport class BillComponent implements OnInit {\n\n    bills;\n    user;\n    constructor(private billService: BillService, private toastrService: ToastrService) {\n    }\n\n    ngOnInit(): void {\n        this.user = JSON.parse(localStorage.getItem('currentUser'));\n        this.billService.getUserBills().subscribe(data => {\n                this.bills = data;\n                console.log(data);\n            },\n            error => this.toastrService.error(error, 'error', toasterConfig)\n        );\n    }\n}\n","<div class=\"container justify-content-center\">\n    <h1 class=\"ml-2\">\n        Your invoices\n    </h1>\n    <div class=\"container\">\n        <h3></h3>\n        <table class=\"table table-light\">\n            <tr class=\"thead thead-dark\">\n                <th>User</th> \n                <th>Deadline</th> \n                <th>Trainings</th> \n                <th>Total</th>\n            </tr>\n            <tr *ngFor=\"let bill of bills\">\n                <td>{{user.userName}}</td>\n                <td>{{bill.deadline | date: \"dd MMM yyyy\"}}</td>\n                <td>{{bill.trainings.length}}</td>\n                <td>{{bill.total}}</td>\n            </tr>\n        </table>\n        \n    </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute} from '@angular/router';\nimport {TeamService} from '../../services/team.service';\nimport {TrainingService} from '../../services/training.service';\nimport {BillService} from '../../services/bill.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../../model/toasterConfig';\n\n@Component({\n    selector: 'app-create-bill',\n    templateUrl: './create-bill.component.html',\n    styleUrls: ['./create-bill.component.scss']\n})\nexport class CreateBillComponent implements OnInit {\n    users;\n    user;\n    trainings;\n    total;\n\n    constructor(private authService: AuthService,\n                private teamService: TeamService,\n                private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private trainingService: TrainingService,\n                private billService: BillService,\n                private toastrService: ToastrService) {\n        this.userForm = this.fb.group(\n            {\n                user: []\n            }\n        );\n        this.billForm = this.fb.group({\n            deadline: ['', Validators.required],\n            total: ['', Validators.required],\n            trainings: [[], Validators.required]\n        });\n    }\n\n    userForm: any;\n    billForm: any;\n\n    ngOnInit(): void {\n        this.teamService.getPlayersInTeam().subscribe(data => {\n            this.users = data;\n        });\n    }\n\n\n    onSubmit() {\n        const newInvoice = {\n            deadline: this.billForm.get('deadline').value,\n            total: this.billForm.get('total').value,\n            trainings: this.billForm.get('trainings').value,\n            UserBill: this.user\n        };\n        console.log(newInvoice);\n        this.billService.createBillForUser(JSON.stringify(newInvoice)).subscribe(data =>\n            this.toastrService.success('', 'New Bill created', toasterConfig)\n        );\n    }\n\n    selectUser() {\n        this.user = this.userForm.get('user').value;\n        this.trainingService.getTrainingsForUser().subscribe(data => {\n            this.trainings = data;\n            console.table(this.trainings);\n        });\n    }\n}\n","<div class=\"container\">\n    <h2 class=\"text-center\">Create new invoice</h2>\n        <div *ngIf=\"!this.user; else elseBlock\" class=\"text-center\">\n            <span>Please choose player you wish to send a new bill</span>\n            <form [formGroup]=\"userForm\">\n                <mat-form-field class=\"m-4\">\n                    <mat-label>Player</mat-label>\n                    <mat-select \n                        (ngModelChange)=\"selectUser()\"\n                        formControlName=\"user\">\n                        \n                        <mat-option *ngFor=\"let user of users\" [value]=\"user\">\n                            {{user.userName}} {{user.email}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </form>\n        </div>\n        <ng-template #elseBlock>\n            <mat-card class=\"\">\n                <form [formGroup]=\"billForm\" class=\"bill-form container\">\n                    <mat-form-field class=\"m-4 row\">\n                        <mat-label>Trainings to bill for</mat-label>\n                        <mat-select formControlName=\"trainings\" multiple>\n                            <mat-option *ngFor=\"let training of trainings\" [value]=\"training\">\n                                {{training.trainingDate | date : \"dd MMM yyyy\"}}  {{training.trainingPlace.name}}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>\n                            Please choose trainings!\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width-input m-4 row\">\n                        <input matInput type=\"number\" placeholder=\"Invoice total\" formControlName=\"total\" required>\n                        <mat-error>\n                            Please enter invoice total\n                        </mat-error>\n                    </mat-form-field>\n                       <mat-form-field class=\"input m-4 row\">\n                           <input matInput formControlName=\"deadline\" [matDatepicker]=\"picker\" placeholder=\"Choose a deadline\" readonly>\n                           <mat-datepicker-toggle matSuffix [for]=\"picker\" ></mat-datepicker-toggle>\n                           <mat-datepicker #picker></mat-datepicker>\n                       </mat-form-field>\n                    <button class=\"row\" mat-raised-button (click)=\"onSubmit()\" >Create new invoice</button>\n                </form>\n            </mat-card>\n        </ng-template>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {TrainingPlaceService} from '../../services/training-place.service';\nimport {TrainingService} from '../../services/training.service';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TeamService} from '../../services/team.service';\nimport {NotificationService} from '../../services/notification.service';\n\n@Component({\n    selector: 'app-create-notification',\n    templateUrl: './create-notification.component.html',\n    styleUrls: ['./create-notification.component.scss']\n})\nexport class CreateNotificationComponent implements OnInit {\n\n    players: any;\n    notificationFrom: any;\n\n    constructor(private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router,\n                private teamService: TeamService,\n                private notificationService: NotificationService) {\n        this.notificationFrom = this.fb.group({\n            notificationDescription: ['', Validators.required],\n            title: ['', Validators.required]\n        });\n    }\n\n    ngOnInit() {\n        this.teamService.getPlayersInTeam().subscribe(data => this.players = data);\n    }\n\n    removeFromInvited(id: string) {\n        this.players = this.players.filter(pl => pl.id !== id);\n    }\n\n    onSubmit() {\n        const notification = {\n            description: this.notificationFrom.get('notificationDescription').value,\n            title: this.notificationFrom.get('title').value,\n            players: this.players\n        };\n        this.notificationService.createNotification(notification).toPromise().then(data =>\n            this.router.navigate(['/home'])\n        );\n\n    }\n}\n","<div class=\"container mt-4\">\n    <h2 class=\"text-center\">Create new notification for team</h2>\n    <div class=\"container border rounded m-2 box-shadow\">\n        <form [formGroup]=\"notificationFrom\">\n            <div class=\"w-100\"></div>\n            <div class=\" players\">\n                <h2 class=\"text-center\">Send notification to</h2>\n                <div class=\"row m-4 rounded\">\n                    <mat-card *ngFor=\"let player of players;\" class=\"card\">\n                        <mat-card-header class=\"mb-2\">\n                            <img mat-card-sm-image class=\"user-img\" src=\"assets/img/user.png\">\n                            <span class=\"user-name\">{{player.userName}}</span>\n                        </mat-card-header>\n                        <mat-card-content>\n                            <div>\n                                {{player.phoneNumber}}<br>\n                                {{player.position}}\n                            </div>\n                        </mat-card-content>\n                        <mat-card-footer>\n                            <button class=\"m-2 border\" mat-button  color=\"warn\" (click)=\"removeFromInvited(player.id)\">Remove</button>\n                        </mat-card-footer>\n                    </mat-card>\n                </div>\n            </div>\n            <div class=\"container rounded mt-4\">\n                <h2 class=\"text-center\">Notification Options</h2>\n                <mat-form-field class=\"input\">\n                    <input matInput placeholder=\"Notification title\" formControlName=\"title\" required>\n                    <mat-error>\n                        Please provide title of the notification\n                    </mat-error>\n                </mat-form-field>\n                <div class=\"form-group\">\n                    <label for=\"notification-text-area\">Notification content</label>\n                    <textarea class=\"form-control\" formControlName=\"notificationDescription\" id=\"notification-text-area\"\n                              rows=\"3\"></textarea>\n                </div>\n            </div>\n            <div class=\"wrapper\">\n                <button mat-raised-button class=\"m-2\" (click)=\"onSubmit()\" color=\"primary\">Send</button>\n            </div>\n        </form>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TrainingPlaceService} from '../../services/training-place.service';\nimport {TrainingService} from '../../services/training.service';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TeamService} from '../../services/team.service';\nimport {NgxMaterialTimepickerTheme} from 'ngx-material-timepicker';\nimport {AuthService} from '../../services/auth.service';\n\n\n@Component({\n    selector: 'app-create-training',\n    templateUrl: './create-training.component.html',\n    styleUrls: ['./create-training.component.scss']\n})\nexport class CreateTrainingComponent implements OnInit {\n\n    constructor(private trainingPlaceService: TrainingPlaceService,\n                private trainingService: TrainingService,\n                private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router,\n                private teamService: TeamService,\n                private authService: AuthService) {\n        this.trainingFrom = this.fb.group({\n            duration: ['', Validators.required],\n            start: ['', Validators.required],\n            description: ['', Validators.required],\n            notificationDescription: ['', Validators.required],\n            place: ['', Validators.required],\n            startTime: ['', Validators.required],\n            createdBy: []\n        });\n    }\n    places: any;\n    trainingFrom: any;\n    players: any;\n    user;\n\n    darkTheme: NgxMaterialTimepickerTheme = {\n        container: {\n            bodyBackgroundColor: '#424242',\n            buttonColor: '#fff'\n        },\n        dial: {\n            dialBackgroundColor: '#555',\n        },\n        clockFace: {\n            clockFaceBackgroundColor: '#555',\n            clockHandColor: '#790e8b',\n            clockFaceTimeInactiveColor: '#fff'\n        }\n    };\n\n    ngOnInit() {\n        this.trainingPlaceService.getTrainingPlaces().subscribe(data => this.places = data);\n        this.teamService.getPlayersInTeam().subscribe(data => this.players = data);\n        this.authService.currentUser.subscribe(data => this.user = data);\n    }\n\n    onSubmit() {\n        const form = {\n            duration: this.trainingFrom.get('duration').value,\n            start: this.trainingFrom.get('start').value,\n            startTime: this.trainingFrom.get('startTime').value,\n            description: this.trainingFrom.get('description').value,\n            trainingPlaceId: this.trainingFrom.get('place').value,\n            notificationContent: this.trainingFrom.get('notificationDescription').value,\n            peopleInvited: this.players,\n            createdBy: this.user\n        };\n        this.trainingService.createTraining(form).then(r =>\n            this.router.navigate(['/home'])\n        );\n    }\n\n    removeFromInvited(id: string) {\n        this.players = this.players.filter(pl => pl.id !== id);\n    }\n}\n","<div class=\"container m-4 border rounded content box-shadow content\">\n    <h2 class=\"text-center\">Create new training</h2>\n    <form [formGroup]=\"trainingFrom\" class=\"training-form\">\n        <div class=\"row\">\n            <div class=\"col\">\n                <mat-form-field class=\"input\">\n                    <input matInput placeholder=\"Training duration\" formControlName=\"duration\" required>\n                    <mat-error>\n                        Please provide training duration\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field  class=\"input\">\n                    <mat-label>Training place</mat-label>\n                    <mat-select formControlName=\"place\">\n                        <mat-option *ngFor=\"let place of places\" [value]=\"place.id\">\n                            {{place.name}}: {{place.address}}\n                        </mat-option>\n                    </mat-select>\n                    <mat-error>\n                        Please choose facility\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"input\">\n                    <input matInput formControlName=\"start\" [matDatepicker]=\"picker\" placeholder=\"Choose a date\" readonly>\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\" ></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n                <div class=\"time-picker\">\n                    <label for=\"startTime\"> Training start</label>\n                    <span>\n                        <input id=\"startTime\" class=\"form-control w-50\" formControlName=\"startTime\" [format]=\"24\" [ngxTimepicker]=\"toggleTimepicker\" [disableClick]=\"true\" readonly>\n                        <ngx-material-timepicker-toggle class=\"clock\" [for]=\"toggleTimepicker\"></ngx-material-timepicker-toggle>\n                    </span>\n                    <ngx-material-timepicker  [theme]=\"darkTheme\" #toggleTimepicker></ngx-material-timepicker>\n                </div>\n                \n                <div class=\"w-100\"></div>\n                <div class=\"form-group\">\n                    <label for=\"training-description\">Training description</label>\n                    <textarea class=\"form-control\" formControlName=\"description\" id=\"training-description\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"w-100\"></div>\n                <div class=\"border rounded players\">\n                    <h2 class=\"text-center\">Players invited to training</h2>\n                    <div class=\"row m-4 rounded\">\n                        <mat-card *ngFor=\"let player of players;\" class=\"card\">\n                     \n                            <mat-card-header class=\"mb-2\">       \n                                <img mat-card-sm-image class=\"user-img\" src=\"assets/img/user.png\">\n                                <span class=\"user-name\">{{player.userName}}</span>\n                            </mat-card-header>\n                            <mat-card-content> \n                                <div>\n                                    {{player.phoneNumber}}<br>\n                                    {{player.position}}\n                                </div>\n                            </mat-card-content>\n                            <mat-card-footer>\n                                <button class=\"m-2 border\" mat-button  color=\"warn\" (click)=\"removeFromInvited(player.id)\">Remove</button>\n                            </mat-card-footer>\n                        </mat-card>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"w-100 wrapper m-4\">\n            <button class=\"pl-4 pr-4 create-button\" (click)=\"onSubmit()\" mat-raised-button color=\"primary\">Create</button>\n        </div>\n\n    </form>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {TrainingPlaceService} from '../../services/training-place.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TrainingPlace} from '../../model/training-place';\n\n@Component({\n    selector: 'app-edit-trainingplace',\n    templateUrl: './edit-trainingplace.component.html',\n    styleUrls: ['./edit-trainingplace.component.scss']\n})\nexport class EditTrainingplaceComponent implements OnInit {\n    trainingPlaceForm;\n    trainingPlace: TrainingPlace | null = null;\n\n    constructor(private trainingPlaceService: TrainingPlaceService,\n                private toastrService: ToastrService,\n                private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router,\n    ) {\n        this.trainingPlaceForm = this.fb.group({\n            address: ['', Validators.required],\n            name: ['', Validators.required],\n            openingTime: ['', Validators.required],\n            closingTime: ['', Validators.required]\n        });\n        const id = this.route.snapshot.paramMap.get('id');\n        this.trainingPlaceService.getTrainingPlace(id).subscribe(data => {\n                this.trainingPlace = data;\n            }\n        );\n        console.log(this.trainingPlace);\n    }\n    \n    ngOnInit(){\n    }\n    \n    onSubmit() {\n        const form = {\n            address: this.trainingPlaceForm.get('address').value,\n            name: this.trainingPlaceForm.get('name').value,\n            openingTime: this.trainingPlaceForm.get('openingTime').value,\n            closingTime: this.trainingPlaceForm.get('closingTime').value\n        };\n        this.trainingPlaceService.editTrainingPlace(form).subscribe(data => {\n                this.toastrService.success(JSON.stringify(data));\n                this.router.navigate(['/home']);\n            },\n            error => this.toastrService.error(error));\n    }\n}\n","<div class=\"container\">\n    <form [formGroup]=\"trainingPlaceForm\" class=\"container border\">\n    <h2>Edit training place</h2>\n    <mat-form-field class=\"full-width-input m-4 row\">\n        <input matInput placeholder=\"Address\" formControlName=\"address\" value=\"{{trainingPlace.address}}\" required>\n        <mat-error>\n            Please enter address\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input m-4 row\">\n        <input matInput placeholder=\"Training place name\" value=\"{{trainingPlace.name}}\"  formControlName=\"name\" required>\n        <mat-error>\n            Please enter name\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input m-4 row\">\n        <input matInput  placeholder=\"Opening time\" value=\"{{trainingPlace.openingTime}}\" formControlName=\"openingTime\" required>\n        <mat-error>\n            Please enter opening time\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input m-4 row\">\n        <input matInput  placeholder=\"Closing time\" value=\"{{trainingPlace.closingTime}}\"  formControlName=\"closingTime\" required>\n        <mat-error>\n            Please enter closing time\n        </mat-error>\n    </mat-form-field>\n    <div class=\"text-center\">\n        <button mat-raised-button class=\"m-2\" (click)=\"onSubmit()\" color=\"primary\">Create</button>\n    </div>\n    </form>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {TeamService} from '../../services/team.service';\nimport {NotificationService} from '../../services/notification.service';\nimport {AuthService} from '../../services/auth.service';\nimport {UserService} from '../../services/user.service';\nimport {Toast, ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../../model/toasterConfig';\n\n@Component({\n    selector: 'app-feedback',\n    templateUrl: './feedback.component.html',\n    styleUrls: ['./feedback.component.scss']\n})\nexport class FeedbackComponent implements OnInit {\n\n    feedBackForm: any;\n\n    constructor(private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router,\n                private authService: AuthService,\n                private userService: UserService,\n                private toastrService : ToastrService) {\n        this.feedBackForm = this.fb.group({\n            feedback: ['', Validators.required],\n            rating: [null, Validators.required]\n        });\n    }\n\n    ngOnInit(): void {\n    }\n\n    onSubmit() {\n        const feedback = {\n            description: this.feedBackForm.get('feedback').value,\n            rating: this.feedBackForm.get('rating').value,\n            user: this.authService.currentUserValue,\n        };\n        this.userService.postFeedback(feedback).subscribe(\n            r => this.toastrService.success(r.toString(), 'success', toasterConfig)\n        );\n        this.router.navigate(['/home']);\n    }\n\n}\n","<div class=\"container\">\n    <mat-card>\n        <form [formGroup]=\"feedBackForm\">\n            <h2 class=\"text-center\">Give feedback to improve this app</h2>\n            <div class=\"form-group \"> \n                <mat-form-field class=\"input row m-4\">\n                    <input type=\"number\" matInput placeholder=\"Rating from 1-5\" max=\"5\" min=\"0\" formControlName=\"rating\" required>\n                    <mat-error>\n                        Please provide rating for this app\n                    </mat-error>\n                </mat-form-field>\n                <div class=\"\">\n                 \n                </div>\n                \n            </div>\n            <div class=\"row m-4\">\n                <label for=\"feedback-text-area\">Feedback</label>\n                <textarea class=\"form-control\" formControlName=\"feedback\" id=\"feedback-text-area\"\n                          rows=\"5\" placeholder=\"Write your feedback here\">\n                    \n                </textarea>\n            </div>\n            \n            <div class=\"row justify-content-center\">\n                <button mat-raised-button color=\"primary\" class=\"\" (click)=\"onSubmit()\" >Submit</button>\n            </div>\n            \n        </form>\n    </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row mt-5\">\n    <app-calendar class=\"calendar \"></app-calendar>\n    <app-notification class=\"notifications \"></app-notification>\n  </div>\n</div>\n","<div class=\"container mt-4\">\n    <mat-card>\n        <mat-card-content>\n            <form [formGroup]=\"form\">\n                <h2>Log In</h2>\n                <mat-error *ngIf=\"loginInvalid\">\n                    The username and password were not recognised\n                </mat-error>\n                <mat-form-field class=\"full-width-input\">\n                    <input matInput placeholder=\"Email\" formControlName=\"username\" required>\n                    <mat-error>\n                        Please provide a valid email address\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"full-width-input\">\n                    <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\n                    <mat-error>\n                        Please provide a valid password\n                    </mat-error>\n                </mat-form-field>\n                <button (click)=\"onSubmit()\" mat-raised-button class=\"nav-btn\" color=\"primary\">Login</button>\n            </form>\n        </mat-card-content>\n    </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthService} from '../../services/auth.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    public loginInvalid: boolean;\n    private formSubmitAttempt: boolean;\n    private returnUrl: string;\n\n    constructor(\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authService: AuthService\n    ) {\n    }\n\n    async ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/home';\n\n        this.form = this.fb.group({\n            username: ['', Validators.email],\n            password: ['', Validators.required]\n        });\n    }\n\n    async onSubmit() {\n        this.loginInvalid = false;\n        this.formSubmitAttempt = false;\n        if (this.form.valid) {\n            try {\n                const email = this.form.get('username').value;\n                const password = this.form.get('password').value;\n                await this.authService.login(email, password).subscribe(data => {\n                    if (data.token != null) {\n                        this.router.navigate([this.returnUrl]);\n                    }\n\n                });\n            } catch (err) {\n                this.loginInvalid = true;\n            }\n        } else {\n            this.formSubmitAttempt = true;\n        }\n    }\n}\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {TeamService} from '../../services/team.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {toasterConfig} from '../../model/toasterConfig';\n\n@Component({\n    selector: 'app-manage-team',\n    templateUrl: './manage-team.component.html',\n    styleUrls: ['./manage-team.component.scss']\n})\nexport class ManageTeamComponent implements OnInit {\n    players: any;\n\n    constructor(private teamService: TeamService, public toastrService: ToastrService,) {\n    }\n\n\n    ngOnInit(): void {\n        this.teamService.getPlayersInTeam().subscribe(data => this.players = data);\n    }\n    remove(player){\n        this.players = this.players.filter(pl => pl.id !== player.id);\n        this.teamService.removePlayerFromTeam(player).toPromise().then(\n            r => {\n                this.toastrService.success(r.toString(), 'Player removed!', toasterConfig);\n            },\n            error => {\n                this.toastrService.error(error.toString(), 'Error', toasterConfig);\n            }\n        );\n    }\n\n\n}\n","<div class=\"container-fluid\">\n    <h2 class=\"text-center mt-4\">Manage football players in the club</h2>\n\n    <table class=\"table table-light mr-4  ml-4\">\n        <tr class=\"thead thead-dark\">\n            <th>Name</th>\n            <th>Email</th>\n            <th>Phone number</th>\n            <th>Team</th>\n            <th></th>\n        </tr>\n        <tr *ngFor=\"let player of players\">\n            <td>{{player.userName}}</td>\n            <td>{{player.email}}</td>\n            <td>{{player.phoneNumber}}</td>\n            <td>{{player.teamName}}</td>\n            <td><button (click)=\"remove(player)\" class=\"btn btn-danger\" >remove player</button></td>\n        </tr>\n    </table>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {TrainingPlaceService} from '../../services/training-place.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {toasterConfig} from '../../model/toasterConfig';\n\n@Component({\n    selector: 'app-manage-trainingplaces',\n    templateUrl: './manage-trainingplaces.component.html',\n    styleUrls: ['./manage-trainingplaces.component.scss']\n})\nexport class ManageTrainingplacesComponent implements OnInit {\n    trainingPlaceForm;\n    trainingPlaces;\n\n    constructor(private trainingPlaceService: TrainingPlaceService,\n                private toastrService: ToastrService,\n                private fb: FormBuilder,\n                private route: ActivatedRoute,\n                private router: Router,\n    ) {\n        this.trainingPlaceForm = this.fb.group({\n            address: ['', Validators.required],\n            name: ['', Validators.required],\n            openingTime: ['', Validators.required],\n            closingTime: ['', Validators.required]\n        });\n    }\n\n    ngOnInit(): void {\n        this.trainingPlaceService.getTrainingPlaces().subscribe(data => {\n                this.trainingPlaces = data;\n            }, error => this.toastrService.error(error)\n        );\n    }\n\n    onSubmit() {\n        const form = {\n            address: this.trainingPlaceForm.get('address').value,\n            name: this.trainingPlaceForm.get('name').value,\n            openingTime: this.trainingPlaceForm.get('openingTime').value,\n            closingTime: this.trainingPlaceForm.get('closingTime').value\n        };\n        this.trainingPlaceService.addTrainingPlace(form).subscribe( data => {\n                this.toastrService.success(JSON.stringify(data));\n                location.reload();\n            },\n                error => this.toastrService.error(error));\n    }\n\n    delete(id: any) {\n        this.trainingPlaceService.delete(id).toPromise().then(\n            response => {\n                this.toastrService.success(response.toString(), 'Succsess', toasterConfig);\n                location.reload();\n            }\n        ).catch(error => this.toastrService.error(error, 'Error', toasterConfig ));\n    }\n}\n","<div class=\"container\">\n    <h1 class=\"text-center\">Training facilities</h1>\n    <form [formGroup]=\"trainingPlaceForm\" class=\"container border\">\n        <h2>Add new training place</h2>\n        <mat-form-field class=\"full-width-input m-4 row\">\n            <input matInput placeholder=\"Address\" formControlName=\"address\" required>\n            <mat-error>\n                Please enter address\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"full-width-input m-4 row\">\n            <input matInput placeholder=\"Training place name\" formControlName=\"name\" required>\n            <mat-error>\n                Please enter name\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"full-width-input m-4 row\">\n            <input matInput  placeholder=\"Opening time\" formControlName=\"openingTime\" required>\n            <mat-error>\n                Please enter opening time \n            </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"full-width-input m-4 row\">\n            <input matInput  placeholder=\"Closing time\" formControlName=\"closingTime\" required>\n            <mat-error>\n                Please enter closing time\n            </mat-error>\n        </mat-form-field>\n        <div class=\"wrapper\">\n            <button mat-raised-button class=\"m-2\" (click)=\"onSubmit()\" color=\"primary\">Create</button>\n        </div>\n    </form>\n    <div class=\"container mt-4\">\n        <h1>Training Places</h1>\n        <table class=\"table mat-table\">\n            <thead>\n            <th>\n                Address\n            </th>\n            <th>\n                Name\n            </th>\n            <th>\n                Opening time\n            </th>\n            <th>\n                Closing time\n            </th>\n            <th></th>\n            </thead>\n            <tr *ngFor=\"let trainingPlace of trainingPlaces\">\n                <td>{{trainingPlace.address}}</td>\n                <td>{{trainingPlace.name}}</td>\n                <td>{{trainingPlace.openingTime}}</td>\n                <td>{{trainingPlace.closingTime}}</td>\n                <td><button mat-raised-button color=\"primary\" routerLink=\"/trainingplace/edit/{{trainingPlace.id}}\">Edit</button> | <button mat-raised-button color=\"warn\" (click)=\"delete(trainingPlace.id)\"> Delete</button></td>\n            </tr>\n        </table>\n    </div>\n</div>\n","<mat-card class=\"registerForm mt-4\">\n    <mat-card-content>\n        <form [formGroup]=\"registerFrom\" class=\"\">\n            <h1>Register</h1>\n            <mat-error *ngIf=\"registerFromInValid\">\n                Register form is not valid\n            </mat-error>\n            <span class=\"\">\n                Please fill in this form to create an account.\n            </span>\n            <div class=\"row\">\n                <div class=\"col\">\n                    <mat-form-field class=\"full-width-input m-4\">\n                        <input matInput placeholder=\"Email\" formControlName=\"email\" required>\n                        <mat-error>\n                            Please provide a valid email address\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width-input m-4\">\n                        <input matInput placeholder=\"First name\" formControlName=\"firstName\" required>\n                        <mat-error>\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width-input m-4\">\n                        <input matInput placeholder=\"Last name\" formControlName=\"lastName\" required>\n                        <mat-error>\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"full-width-input m-4\">\n                        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\n                        <mat-error>\n                            Please provide a valid password\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col\">\n                    <mat-form-field class=\"full-width-input m-4\">\n                        <input matInput placeholder=\"Phone number\" formControlName=\"phoneNumber\" required>\n                        <mat-error>\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"m-4\">\n                        <mat-label>Team</mat-label>\n                        <mat-select formControlName=\"team\">\n                            <mat-option *ngFor=\"let team of teams\" [value]=\"team.id\">\n                                {{team.name}}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>\n                            Please choose team\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"m-4\">\n                        <mat-label>Position</mat-label>\n                        <mat-select formControlName=\"position\" multiple>\n                            <mat-option *ngFor=\"let position of positions\" [value]=\"position\">\n                                {{position}}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>\n                            Please choose position\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"m-4\">\n                        <mat-label>Role</mat-label>\n                        <mat-select formControlName=\"role\">\n                            <mat-option *ngFor=\"let role of roles\" [value]=\"role\">\n                                {{role}}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>\n                            Please choose role\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <button mat-raised-button color=\"secondary\" id=\"register-button\" (click)=\"onSubmit()\">Register</button>\n        </form>\n    </mat-card-content>\n</mat-card>\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AuthService} from '../../services/auth.service';\nimport {TeamService} from '../../services/team.service';\nimport {UserService} from '../../services/user.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n    public registerFormInvalid: boolean;\n    private formSubmitAttempt: boolean;\n    private returnUrl: string;\n    roles: any = ['Manager', 'Basic user'];\n\n    // selected: any;\n    registerFromInValid: any;\n    registerFrom: any;\n    teams: any;\n    positions: string[] = ['Attacker', 'Defender', 'Midfielder', 'Goalkeeper'];\n\n    constructor(\n        private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authService: AuthService,\n        private teamService: TeamService) {\n    }\n\n    async ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/home';\n        this.registerFrom = this.fb.group({\n            email: ['', Validators.email],\n            password: ['', Validators.required],\n            password2: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            phoneNumber: ['', Validators.required],\n            team: ['', Validators.required],\n            role: ['', Validators.required],\n            position: [[]]\n        });\n\n        this.teamService.getTeams()\n            .subscribe(data => this.teams = data);\n    }\n\n    async onSubmit() {\n        this.formSubmitAttempt = false;\n        this.registerFormInvalid = false;\n        try {\n            const email = this.registerFrom.get('email').value;\n            const password = this.registerFrom.get('password').value;\n            const firstName = this.registerFrom.get('firstName').value;\n            const lastName = this.registerFrom.get('lastName').value;\n            const phoneNumber = this.registerFrom.get('phoneNumber').value;\n            const teamId = this.registerFrom.get('team').value;\n            const role = this.registerFrom.get('role').value;\n            const positions = this.registerFrom.controls.position.value;\n            const form = {\n                email,\n                password,\n                firstName,\n                lastName,\n                phoneNumber,\n                team: teamId,\n                role,\n                positions\n            };\n            await this.authService.register(form).subscribe(data => {\n                if (data.token != null) {\n                    this.router.navigate([this.returnUrl]);\n                }\n            });\n        } catch (e) {\n            this.registerFormInvalid = true;\n        }\n\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, ParamMap, Route, Router} from '@angular/router';\nimport {switchMap} from 'rxjs/operators';\nimport {TrainingService} from '../../services/training.service';\n\n@Component({\n    selector: 'app-training',\n    templateUrl: './training.component.html',\n    styleUrls: ['./training.component.scss']\n})\nexport class TrainingComponent implements OnInit {\n    training: any;\n\n    constructor(private route: ActivatedRoute,\n                private trainingService: TrainingService) {\n    }\n\n    ngOnInit() {\n        const id = this.route.snapshot.paramMap.get('id');\n        this.trainingService.getTrainingData(id).subscribe(\n            data => {\n                console.log(data);\n                this.training = data;\n            });\n    }\n}\n","<div class=\"content\">\n    <div class=\"container m-4 p-4 box-shadow rounded\">\n        <h1 class=\"text-center mt-4\">Training details</h1>\n        <div class=\"container\">\n            <mat-card class=\"row w-100 m-2\">\n                <table class=\"table table-responsive\">\n                    <tr>\n                        <th>Description</th>\n                        <th>Status</th>\n                        <th>Duration</th>\n                        <th>Date</th>\n                        <th>Start time</th>\n                    </tr>\n                    <tr>\n                        <td>{{training.description}}</td>\n                        <td>{{training.trainingStatus}}</td>\n                        <td>{{training.duration}}</td>\n                        <td>{{training.trainingDate | date: \"dd MMM yyyy\"}}</td>\n                        <td>{{training.startTime.substring(0, training.startTime.length - 3)}}</td>\n                    </tr>\n                </table>\n            </mat-card> \n            <div class=\"row w-100 m-2\">\n                <mat-card class=\"col\">\n                    <h2>Training place</h2>\n                    <div class=\"container\">\n                        <div class=\"row mt-2\">\n                            {{training.trainingPlace.name}}\n                        </div>\n                        <div class=\"row mt-2\">\n                            Address: {{training.trainingPlace.address}}\n                        </div>\n                        <div class=\"row mt-2\">\n                            Open: {{training.trainingPlace.closingTime}} - {{training.trainingPlace.openingTime}}\n                        </div>\n                    </div>\n                </mat-card>\n    \n    \n                <mat-card class=\"col\">\n                    <h2>Created by user</h2>\n                    <div class=\"container\">\n                        <div class=\"row mt-2\">Name : {{training.createdBy.userName}} </div>\n                        <div class=\"row mt-2\">Email : {{training.createdBy.email}}</div>\n                        <div class=\"row mt-2\">Phone : {{training.createdBy.phoneNumber}}</div>\n                    </div>\n                </mat-card>\n            </div>\n    \n    \n    \n        </div>\n        <mat-card class=\"row w-100 m-2\">\n            <h2 class=\"text-center\">People invited</h2>\n            <div class=\"container\">\n                <table class=\"table table-striped rounded\">\n                    <thead class=\"thead-dark\">\n                        <th>Player</th>\n                        <th>Phone number</th>\n                        <th>Email</th>\n                        <th>Positions</th>\n                        <th>Recieved notification</th>\n                        <th>Notifcation Answer</th>\n                    </thead>\n                    <tr *ngFor=\"let player of training.peopleInvited;\">\n                        <td>{{player.userName}}</td>\n                        <td>{{player.phoneNumber}}</td>\n                        <td>{{player.email}}</td>\n                        <td> \n                            <div *ngFor=\"let pos of player.positions\">\n                                  {{pos.position}} \n                            </div>\n                        </td>\n                        <td>{{player.recived.toString()}}</td>\n                        <td><div *ngIf=\"player.answer !== null\">\n                            <div class=\"row\">Coming {{player.answer.coming}}</div>\n                            <div class=\"row\">Reason {{player.answer.content}}</div>\n                        </div></td>\n                    </tr>\n                </table>\n            </div>\n        </mat-card>\n        <mat-card class=\"row w-100 m-2\">\n            <h2 class=\"text-center\">People attending</h2>\n            <div class=\"container\">\n                <table class=\"table table-striped rounded\">\n                    <thead class=\"thead-dark\">\n                    <th>Player</th>\n                    <th>Phone number</th>\n                    <th>Email</th>\n                    <th>Positions</th>\n                    </thead>\n                    <tr *ngFor=\"let player of training.peopleAttending;\">\n                        <td>{{player.userName}}</td>\n                        <td>{{player.phoneNumber}}</td>\n                        <td>{{player.email}}</td>\n                        <td>\n                            <div *ngFor=\"let pos of player.positions\">\n                                {{pos.position}}\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n    \n        </mat-card>\n    </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {NotificationService} from '../../services/notification.service';\n\n@Component({\n    selector: 'app-view-notification',\n    templateUrl: './view-notification.component.html',\n    styleUrls: ['./view-notification.component.scss']\n})\nexport class ViewNotificationComponent implements OnInit {\n\n    notifications : any;\n    constructor(private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.notificationService.getAllUserNotifications().subscribe(data => this.notifications = data);\n    }\n}\n","<div class=\"container\">\r\n    <h1>Notification history</h1>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    apiBaseUrl: 'https://trainingappbackend.azurewebsites.net/api/v1/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}